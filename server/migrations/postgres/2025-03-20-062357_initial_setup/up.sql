-- Table: provider
-- Stores information about different LLM providers (e.g., OpenAI, VertexAI, Ollama).
CREATE TABLE IF NOT EXISTS provider
(
    id            BIGINT PRIMARY KEY,               -- Unique identifier for the provider (generated by Snowflake algorithm).
    provider_key  TEXT    NOT NULL,               -- A unique string key identifying the provider (e.g., "openai", "azure_openai").
    name          TEXT    NOT NULL,               -- User-friendly name of the provider (e.g., "OpenAI GPT").
    endpoint      TEXT    NOT NULL,               -- The base API endpoint URL for this provider.
    use_proxy     BOOLEAN NOT NULL DEFAULT false, -- Flag indicating if requests to this provider should go through a proxy.
    is_enabled    BOOLEAN NOT NULL DEFAULT true,  -- Flag indicating if this provider is currently enabled for use.
    deleted_at    BIGINT DEFAULT NULL,            -- Soft delete timestamp. NULL indicates the record is active.
    created_at    BIGINT  NOT NULL,               -- Timestamp (milliseconds since epoch) when the record was created.
    updated_at    BIGINT  NOT NULL,               -- Timestamp (milliseconds since epoch) when the record was last updated.
    provider_type TEXT    NOT NULL DEFAULT 'OPENAI', -- Type of the provider, helps in categorizing or handling provider-specific logic.
    provider_api_key_mode  TEXT    NOT NULL DEFAULT 'QUEUE',

    -- Data Integrity Constraints
    CONSTRAINT provider_type_check CHECK (provider_type IN ('OPENAI', 'GEMINI', 'VERTEX', 'GEMINI_OPENAI', 'VERTEX_OPENAI', 'OLLAMA')), -- Ensures provider_type is one of the allowed values.
    CONSTRAINT provider_api_key_mode_check CHECK (provider_api_key_mode IN ('QUEUE', 'RANDOM')),
    CONSTRAINT provider_created_at_updated_at_check CHECK (updated_at >= created_at), -- Ensures updated_at is not earlier than created_at.
    CONSTRAINT provider_key_not_empty_check CHECK (provider_key <> ''), -- Ensures provider_key is not an empty string.
    CONSTRAINT provider_name_not_empty_check CHECK (name <> ''), -- Ensures name is not an empty string.
    CONSTRAINT provider_endpoint_not_empty_check CHECK (endpoint <> '') -- Ensures endpoint is not an empty string.
);

-- Unique Index: Ensures provider_key is unique among non-deleted and enabled providers.
CREATE UNIQUE INDEX IF NOT EXISTS idx_provider_key_unique_when_active
    ON provider (provider_key)
    WHERE deleted_at IS NULL AND is_enabled = true;

-- Table: provider_api_key
-- Stores API keys associated with each provider. A provider can have multiple API keys.
CREATE TABLE IF NOT EXISTS provider_api_key
(
    id          BIGINT PRIMARY KEY,               -- Unique identifier for the API key record (generated by Snowflake algorithm).
    provider_id BIGINT  NOT NULL,               -- Foreign key referencing the provider this API key belongs to.
    api_key     TEXT    NOT NULL,               -- The actual API key string (sensitive data, consider encryption at application layer).
    description TEXT,                           -- Optional user-friendly description for this API key.
    deleted_at  BIGINT DEFAULT NULL,            -- Soft delete timestamp. NULL indicates the key is active.
    is_enabled  BOOLEAN NOT NULL DEFAULT true,  -- Flag indicating if this API key is currently enabled for use.
    created_at  BIGINT  NOT NULL,               -- Timestamp (milliseconds since epoch) when the record was created.
    updated_at  BIGINT  NOT NULL,               -- Timestamp (milliseconds since epoch) when the record was last updated.

    -- Foreign Key Constraint: Links to the 'provider' table.
    CONSTRAINT fk_provider_api_key_provider_id
        FOREIGN KEY (provider_id) REFERENCES provider (id)
            ON DELETE CASCADE    -- If a provider is deleted, all its associated API keys are also deleted.
            ON UPDATE CASCADE,   -- If provider.id changes (theoretically not for Snowflake IDs), update here.

    -- Data Integrity Constraints
    CONSTRAINT chk_provider_api_key_api_key_not_empty CHECK (api_key <> ''), -- Ensures api_key is not an empty string.
    CONSTRAINT chk_provider_api_key_timestamps CHECK (updated_at >= created_at) -- Ensures updated_at is not earlier than created_at.
);

-- Unique Index: Ensures that for a given provider, an active and enabled API key string is unique.
CREATE UNIQUE INDEX IF NOT EXISTS idx_provider_api_key_pid_apikey_uq_active
    ON provider_api_key (provider_id, api_key)
    WHERE deleted_at IS NULL AND is_enabled = true;

-- Index: Commonly used for querying API keys by provider.
CREATE INDEX IF NOT EXISTS idx_pak_provider_id ON provider_api_key(provider_id); -- Added for consistency, FK usually creates one in PG but not SQLite.

-- Table 1: billing_plans
-- Stores a collection of reusable billing plans.
CREATE TABLE IF NOT EXISTS billing_plans (
    id BIGINT PRIMARY KEY,                      -- Plan ID: A unique identifier.
    name TEXT NOT NULL UNIQUE,                  -- Plan Name: A unique, human-readable name, e.g., "Standard Tier", "Pro Tier - Azure".
    description TEXT,                           -- Optional text description for this billing plan.
    currency TEXT NOT NULL DEFAULT 'USD',
    -- Timestamps (in milliseconds)
    created_at BIGINT NOT NULL,
    updated_at BIGINT NOT NULL,
    deleted_at BIGINT DEFAULT NULL,              -- Soft delete timestamp. NULL indicates the plan is active.
    CONSTRAINT chk_bp_currency_format CHECK (currency IS NOT NULL AND LENGTH(currency) = 3)
);

-- Index for fast lookup of the unique plan name.
-- Note: For SQLite compatibility, uniqueness for non-deleted rows should be enforced by the application layer.
CREATE UNIQUE INDEX IF NOT EXISTS idx_bp_unique_name ON billing_plans(name) WHERE deleted_at IS NULL;

-- Table 2: price_rules
-- Stores individual pricing rules, each belonging to a billing plan.
CREATE TABLE IF NOT EXISTS price_rules (
    id BIGINT PRIMARY KEY,

    plan_id BIGINT NOT NULL,                    -- Foreign key to the billing_plans table.

    -- Rule attributes (unchanged from the previous version)
    description TEXT,
    is_enabled BOOLEAN NOT NULL DEFAULT true,
    effective_from BIGINT NOT NULL,
    effective_until BIGINT,
    period_start_seconds_utc INTEGER DEFAULT NULL,
    period_end_seconds_utc INTEGER DEFAULT NULL,
    usage_type TEXT NOT NULL,
    media_type TEXT DEFAULT NULL,
    condition_had_reasoning INTEGER DEFAULT NULL,
    tier_from_tokens INTEGER DEFAULT NULL,
    tier_to_tokens INTEGER DEFAULT NULL,
    price_in_micro_units BIGINT NOT NULL,
    created_at BIGINT NOT NULL,
    updated_at BIGINT NOT NULL,

    -- Foreign Key Constraint (Updated name: fk_pr_plan_id)
    CONSTRAINT fk_pr_plan_id FOREIGN KEY (plan_id) REFERENCES billing_plans(id)
        ON DELETE CASCADE,

    -- CHECK Constraints (Updated names for clarity)
    CONSTRAINT chk_pr_price_non_negative CHECK (price_in_micro_units >= 0),
    CONSTRAINT chk_pr_effective_times_order CHECK (effective_until IS NULL OR effective_until >= effective_from),
    CONSTRAINT chk_pr_timestamps CHECK (updated_at >= created_at),
    CONSTRAINT chk_pr_tier_logic CHECK (tier_from_tokens IS NULL OR tier_to_tokens IS NULL OR tier_to_tokens > tier_from_tokens),
    CONSTRAINT chk_pr_usage_type_valid CHECK (usage_type IN ('PROMPT', 'COMPLETION', 'INVOCATION')),
    CONSTRAINT chk_pr_media_type_valid CHECK (media_type IS NULL OR media_type IN ('IMAGE', 'AUDIO', 'VIDEO', 'CACHE_TEXT', 'CACHE_AUDIO', 'CACHE_VIDEO')),
    CONSTRAINT chk_pr_cache_usage_logic CHECK ((NOT media_type LIKE 'CACHE_%') OR (usage_type = 'PROMPT')),
    CONSTRAINT chk_pr_invocation_logic CHECK ((usage_type <> 'INVOCATION') OR (media_type IS NULL AND tier_from_tokens IS NULL AND tier_to_tokens IS NULL)),
    CONSTRAINT chk_pr_time_period_logic CHECK ((period_start_seconds_utc IS NULL AND period_end_seconds_utc IS NULL) OR (period_start_seconds_utc IS NOT NULL AND period_end_seconds_utc IS NOT NULL AND period_start_seconds_utc >= 0 AND period_start_seconds_utc <= 86400 AND period_end_seconds_utc > period_start_seconds_utc AND period_end_seconds_utc <= 172800 AND (period_end_seconds_utc - period_start_seconds_utc) <= 86400))
);

-- Core index for finding all active rules for a given plan.
CREATE INDEX IF NOT EXISTS idx_pr_lookup_by_plan ON price_rules (plan_id, is_enabled);

-- Table: model
-- Stores information about specific LLM models available through providers.
CREATE TABLE IF NOT EXISTS model
(
    id              BIGINT PRIMARY KEY,               -- Unique identifier for the model record (generated by Snowflake algorithm).
    provider_id     BIGINT  NOT NULL,               -- Foreign key referencing the provider that offers this model.
    billing_plan_id BIGINT,
    model_name      TEXT    NOT NULL,               -- User-defined or system-internal name/alias for the model (e.g., "gpt-4-custom").
                                                    -- This name should be unique for a given provider among non-deleted models.
    real_model_name TEXT,                           -- The actual model identifier used when calling the provider's API (e.g., "gpt-4-1106-preview").
                                                    -- Can be NULL, in which case model_name might be used directly.
    is_enabled      BOOLEAN NOT NULL DEFAULT true,  -- Flag indicating if this model is currently enabled for use.
    deleted_at      BIGINT DEFAULT NULL,            -- Soft delete timestamp. NULL indicates the model is active.
    created_at      BIGINT  NOT NULL,               -- Timestamp (milliseconds since epoch) when the record was created.
    updated_at      BIGINT  NOT NULL,               -- Timestamp (milliseconds since epoch) when the record was last updated.

    -- Foreign Key Constraint: Links to the 'provider' table.
    CONSTRAINT fk_model_provider_id
        FOREIGN KEY (provider_id) REFERENCES provider (id)
            ON DELETE CASCADE    -- If a provider is deleted, all its associated models are also deleted.
            ON UPDATE CASCADE,   -- If provider.id changes, update here.
    CONSTRAINT fk_model_billing_plan_id
        FOREIGN KEY (billing_plan_id) REFERENCES billing_plans(id)
            ON DELETE RESTRICT, -- Prevents deleting a plan that is still in use by a model.

    -- Data Integrity Constraints
    CONSTRAINT chk_model_name_not_empty CHECK (model_name <> ''), -- Ensures model_name is not an empty string.
    CONSTRAINT chk_model_real_model_name_format CHECK (real_model_name IS NULL OR real_model_name <> ''), -- If real_model_name is set, it must not be empty.
    CONSTRAINT chk_model_timestamps CHECK (updated_at >= created_at) -- Ensures updated_at is not earlier than created_at.
);

-- Unique Index: Ensures that for a given provider, an active and enabled model_name is unique.
CREATE UNIQUE INDEX IF NOT EXISTS idx_model_pid_name_uq_active
    ON model (provider_id, model_name)
    WHERE deleted_at IS NULL AND is_enabled = true;

-- Index: Commonly used for querying models by provider.
CREATE INDEX IF NOT EXISTS idx_model_provider_id ON model(provider_id); -- Added for consistency.

-- Table: access_control_policy
-- Defines reusable sets of access control (allow/deny) rules.
CREATE TABLE IF NOT EXISTS access_control_policy (
    id BIGINT PRIMARY KEY,                        -- Unique identifier for the access control policy (Snowflake ID).
    name TEXT NOT NULL,                           -- User-friendly, unique name for this policy (e.g., "Standard User Access", "Admin Full Access").
    description TEXT DEFAULT NULL,                -- Optional description of what this policy entails.
    default_action TEXT NOT NULL DEFAULT 'DENY' CHECK (default_action IN ('ALLOW', 'DENY')), -- Default action if no rules match: 'ALLOW' or 'DENY'.
    created_at BIGINT NOT NULL,                   -- Timestamp (milliseconds since epoch) of creation.
    updated_at BIGINT NOT NULL,                   -- Timestamp (milliseconds since epoch) of last update.
    deleted_at BIGINT DEFAULT NULL,               -- Soft delete timestamp. NULL indicates the policy is active.

    -- Data Integrity Constraints
    CONSTRAINT chk_ac_policy_name_not_empty CHECK (name <> ''), -- Ensures policy name is not empty.
    CONSTRAINT chk_ac_policy_timestamps CHECK (updated_at >= created_at) -- Ensures timestamp consistency.
);

-- Unique Index: Ensures active policy names are unique.
CREATE UNIQUE INDEX IF NOT EXISTS idx_ac_policy_name_uq_not_deleted
ON access_control_policy (name)
WHERE deleted_at IS NULL;

-- Index: For querying by deleted status.
CREATE INDEX IF NOT EXISTS idx_ac_policy_deleted_at ON access_control_policy(deleted_at);

-- Table: access_control_rule
-- Defines individual allow/deny rules within an access_control_policy.
CREATE TABLE IF NOT EXISTS access_control_rule (
    id BIGINT PRIMARY KEY,                        -- Unique identifier for the access control rule (Snowflake ID).
    policy_id BIGINT NOT NULL,                    -- Foreign key to the parent 'access_control_policy'.
    rule_type TEXT NOT NULL,                      -- Type of rule: 'ALLOW' (whitelist) or 'DENY' (blacklist).
    priority INTEGER NOT NULL DEFAULT 0,          -- Rule priority (e.g., lower value = higher priority) for resolving conflicts.
    scope TEXT NOT NULL,                          -- What this rule applies to: 'PROVIDER' or 'MODEL'.
    provider_id BIGINT DEFAULT NULL,              -- Identifier for the provider if scope is 'PROVIDER' or 'MODEL'. Foreign key to provider.id.
    model_id BIGINT DEFAULT NULL,                 -- Identifier for the model if scope is 'MODEL'. Foreign key to model.id.
    is_enabled BOOLEAN NOT NULL DEFAULT TRUE,     -- Flag indicating if this individual rule is currently active.
    description TEXT DEFAULT NULL,                -- Optional description for this rule.
    created_at BIGINT NOT NULL,                   -- Timestamp (milliseconds since epoch) of creation.
    updated_at BIGINT NOT NULL,                   -- Timestamp (milliseconds since epoch) of last update.
    deleted_at BIGINT DEFAULT NULL,               -- Soft delete timestamp. NULL indicates the rule is active.

    -- Foreign Key Constraints
    CONSTRAINT fk_acr_policy_id
        FOREIGN KEY (policy_id) REFERENCES access_control_policy(id)
        ON DELETE CASCADE ON UPDATE CASCADE,      -- If the parent policy is deleted, its rules are also deleted.
    CONSTRAINT fk_acr_provider_id
        FOREIGN KEY (provider_id) REFERENCES provider(id)
        ON DELETE SET NULL ON UPDATE CASCADE,     -- If provider is deleted, rule's provider_id becomes NULL (rule may become invalid or apply more broadly if not handled).
    CONSTRAINT fk_acr_model_id
        FOREIGN KEY (model_id) REFERENCES model(id)
        ON DELETE SET NULL ON UPDATE CASCADE,     -- If model is deleted, rule's model_id becomes NULL.

    -- Data Integrity Constraints
    CONSTRAINT chk_acr_rule_type CHECK (rule_type IN ('ALLOW', 'DENY')), -- Allowed rule types.
    CONSTRAINT chk_acr_scope CHECK (scope IN ('PROVIDER', 'MODEL')), -- Allowed resource scopes.
    CONSTRAINT chk_acr_scope_ids_consistency CHECK ( -- Ensures provider_id/model_id are populated correctly based on scope.
        (scope = 'PROVIDER' AND provider_id IS NOT NULL AND model_id IS NULL) OR
        (scope = 'MODEL' AND provider_id IS NOT NULL AND model_id IS NOT NULL)
    ),
    CONSTRAINT chk_acr_timestamps CHECK (updated_at >= created_at) -- Ensures timestamp consistency.
);

-- Unique Index: Ensures that for a given policy, an active and enabled rule (type, scope, target) is unique.
CREATE UNIQUE INDEX IF NOT EXISTS idx_acr_enabled_logical_key
ON access_control_rule (policy_id, rule_type, scope, provider_id, model_id)
WHERE deleted_at IS NULL AND is_enabled = TRUE;

-- Indexes: For common query patterns.
CREATE INDEX IF NOT EXISTS idx_acr_policy_id ON access_control_rule (policy_id);
CREATE INDEX IF NOT EXISTS idx_acr_enabled_deleted_at ON access_control_rule (is_enabled, deleted_at);

-- Table: system_api_key
-- Stores API keys provided by this system to external users/clients for accessing its services.
CREATE TABLE IF NOT EXISTS system_api_key
(
    id                BIGINT PRIMARY KEY,               -- Unique identifier for the system API key (Snowflake ID).
    api_key           TEXT    NOT NULL,               -- The actual API key string provided to users. Consider storing a hash.
    name              TEXT    NOT NULL,               -- User-friendly name for this key, for easier management.
    description       TEXT,                           -- Optional description for this API key.
    access_control_policy_id BIGINT DEFAULT NULL,     -- Optional foreign key to 'access_control_policy' table.
    is_enabled        BOOLEAN NOT NULL DEFAULT true,  -- Flag indicating if this API key is currently active.
    deleted_at        BIGINT DEFAULT NULL,            -- Soft delete timestamp. NULL indicates the key is active.
    created_at        BIGINT  NOT NULL,               -- Timestamp (milliseconds since epoch) of creation.
    updated_at        BIGINT  NOT NULL,               -- Timestamp (milliseconds since epoch) of last update.

    -- Foreign Key Constraints: Link to policy tables.
    CONSTRAINT fk_sak_ac_policy_id
        FOREIGN KEY (access_control_policy_id) REFERENCES access_control_policy (id)
            ON DELETE SET NULL   -- If the referenced policy is deleted, this key's policy_id becomes NULL.
            ON UPDATE CASCADE,   -- If policy.id changes, update here.

    -- Data Integrity Constraints
    CONSTRAINT chk_system_api_key_api_key_not_empty CHECK (api_key <> ''), -- Ensures the API key string is not empty.
    CONSTRAINT chk_system_api_key_name_not_empty CHECK (name <> ''),       -- Ensures the API key name is not empty.
    CONSTRAINT chk_system_api_key_timestamps CHECK (updated_at >= created_at) -- Ensures timestamp consistency.
);

-- Unique Index: Ensures active and enabled API key strings are unique globally.
CREATE UNIQUE INDEX IF NOT EXISTS idx_system_api_key_key_uq_active
    ON system_api_key (api_key)
    WHERE deleted_at IS NULL AND is_enabled = true;

-- Indexes: For common query patterns.
CREATE INDEX IF NOT EXISTS idx_system_api_key_ac_policy_id ON system_api_key (access_control_policy_id);
CREATE INDEX IF NOT EXISTS idx_system_api_key_is_enabled ON system_api_key (is_enabled);
CREATE INDEX IF NOT EXISTS idx_system_api_key_deleted_at ON system_api_key (deleted_at);
CREATE INDEX IF NOT EXISTS idx_system_api_key_name ON system_api_key (name); -- For querying by name.

-- Table: custom_field_definition
-- 存储可复用的自定义字段具体配置（名称、位置、类型、值等）。
-- 这些定义是 Provider 和 Model 应用自定义字段的基础。
CREATE TABLE IF NOT EXISTS custom_field_definition (
    id BIGINT PRIMARY KEY,                      -- 定义的唯一标识符 (雪花ID)。

    -- 字段元数据: 用于在UI上方便地命名和查找定义，可选
    definition_name TEXT,                       -- 给这个定义起一个易于识别的名称 (例如："标准JSON头部", "用户ID头部")，可以不唯一。
    definition_description TEXT,                -- 对此定义的描述。

    -- 实际字段定义
    field_name TEXT NOT NULL,                   -- 自定义字段的名称 (例如, "X-API-Version", "user_id")。
    field_placement TEXT NOT NULL,              -- 字段放置位置: 'HEADER', 'QUERY', 'BODY'。
    field_type TEXT NOT NULL,                   -- 字段值的类型或操作: 'STRING', 'INTEGER', 'NUMBER', 'BOOLEAN', 'JSON_STRING', 'UNSET'。
                                                -- 'UNSET': 指示应用程序确保此 field_name 在指定的 field_placement 中不存在。
    string_value TEXT,                          -- 如果 field_type 是 'STRING' 或 'JSON_STRING' 则使用。
    integer_value BIGINT,                       -- 如果 field_type 是 'INTEGER' 则使用。
    number_value REAL,                          -- 如果 field_type 是 'NUMBER' (兼容 float/double) 则使用。
    boolean_value BOOLEAN,                      -- 如果 field_type 是 'BOOLEAN' 则使用。
                                                -- 注意: 对于 field_type = 'UNSET', 所有 _value 列应为 NULL。

    is_definition_enabled BOOLEAN NOT NULL DEFAULT true, -- 此定义本身是否全局启用。如果禁用，则所有关联都将无效。
    deleted_at BIGINT DEFAULT NULL,                     -- 软删除此定义的标志。
    created_at BIGINT NOT NULL,                         -- 创建时的时间戳 (毫秒级)。
    updated_at BIGINT NOT NULL,                         -- 最后更新时的时间戳 (毫秒级)。

    -- 数据完整性约束
    CONSTRAINT chk_cfd_field_name_not_empty CHECK (field_name <> ''),
    CONSTRAINT chk_cfd_field_placement CHECK (field_placement IN ('HEADER', 'QUERY', 'BODY')),
    CONSTRAINT chk_cfd_field_type CHECK (field_type IN ('STRING', 'INTEGER', 'NUMBER', 'BOOLEAN', 'JSON_STRING', 'UNSET')),
    CONSTRAINT chk_cfd_value_type_coherence CHECK (
        (field_type = 'STRING'      AND string_value IS NOT NULL AND integer_value IS NULL AND number_value IS NULL AND boolean_value IS NULL) OR
        (field_type = 'INTEGER'     AND string_value IS NULL AND integer_value IS NOT NULL AND number_value IS NULL AND boolean_value IS NULL) OR
        (field_type = 'NUMBER'      AND string_value IS NULL AND integer_value IS NULL AND number_value IS NOT NULL AND boolean_value IS NULL) OR
        (field_type = 'BOOLEAN'     AND string_value IS NULL AND integer_value IS NULL AND number_value IS NULL AND boolean_value IS NOT NULL) OR
        (field_type = 'JSON_STRING' AND string_value IS NOT NULL AND integer_value IS NULL AND number_value IS NULL AND boolean_value IS NULL) OR
        (field_type = 'UNSET'       AND string_value IS NULL AND integer_value IS NULL AND number_value IS NULL AND boolean_value IS NULL)
    ),
    CONSTRAINT chk_cfd_timestamps CHECK (updated_at >= created_at)
);

-- 唯一索引: 确保一个"未删除的"自定义字段定义 (基于字段名、位置、类型、*值*) 是唯一的。
CREATE UNIQUE INDEX IF NOT EXISTS idx_cfd_content_uq_not_deleted
ON custom_field_definition (field_name, field_placement, field_type, string_value, integer_value, number_value, boolean_value)
WHERE deleted_at IS NULL;

-- 索引 (方便查找和管理定义)
CREATE INDEX IF NOT EXISTS idx_cfd_definition_name ON custom_field_definition(definition_name) WHERE deleted_at IS NULL;
CREATE INDEX IF NOT EXISTS idx_cfd_is_definition_enabled ON custom_field_definition(is_definition_enabled);
CREATE INDEX IF NOT EXISTS idx_cfd_deleted_at ON custom_field_definition(deleted_at);

-- Table: provider_custom_field_assignment
-- 将 Provider 与一个或多个 custom_field_definition 关联起来。
CREATE TABLE IF NOT EXISTS provider_custom_field_assignment (
    provider_id BIGINT NOT NULL,                -- 外键，关联到 provider.id。
    custom_field_definition_id BIGINT NOT NULL, -- 外键，关联到 custom_field_definition.id。
    is_enabled BOOLEAN NOT NULL DEFAULT true,   -- 此 Provider 对此自定义字段定义的关联是否启用。
    created_at BIGINT NOT NULL,
    updated_at BIGINT NOT NULL,

    PRIMARY KEY (provider_id, custom_field_definition_id),
    CONSTRAINT fk_pcfa_provider_id
        FOREIGN KEY (provider_id) REFERENCES provider (id)
            ON DELETE CASCADE
            ON UPDATE CASCADE,
    CONSTRAINT fk_pcfa_definition_id
        FOREIGN KEY (custom_field_definition_id) REFERENCES custom_field_definition(id)
            ON DELETE RESTRICT   -- 如果一个定义正被 Provider 使用，阻止直接删除该定义。
            ON UPDATE CASCADE,
    CONSTRAINT chk_pcfa_timestamps CHECK (updated_at >= created_at)
);

CREATE INDEX IF NOT EXISTS idx_pcfa_provider_id_is_enabled ON provider_custom_field_assignment(provider_id, is_enabled);
CREATE INDEX IF NOT EXISTS idx_pcfa_definition_id ON provider_custom_field_assignment(custom_field_definition_id);

-- Table: model_custom_field_assignment
-- 将 Model 与一个或多个 custom_field_definition 关联起来。
CREATE TABLE IF NOT EXISTS model_custom_field_assignment (
    model_id BIGINT NOT NULL,                   -- 外键，关联到 model.id。
    custom_field_definition_id BIGINT NOT NULL, -- 外键，关联到 custom_field_definition.id。
    is_enabled BOOLEAN NOT NULL DEFAULT true,   -- 此 Model 对此自定义字段定义的关联是否启用。
    created_at BIGINT NOT NULL,
    updated_at BIGINT NOT NULL,

    PRIMARY KEY (model_id, custom_field_definition_id),
    CONSTRAINT fk_mcfa_model_id
        FOREIGN KEY (model_id) REFERENCES model (id)
            ON DELETE CASCADE
            ON UPDATE CASCADE,
    CONSTRAINT fk_mcfa_definition_id
        FOREIGN KEY (custom_field_definition_id) REFERENCES custom_field_definition(id)
            ON DELETE RESTRICT   -- 阻止直接删除被 Model 使用的定义。
            ON UPDATE CASCADE,
    CONSTRAINT chk_mcfa_timestamps CHECK (updated_at >= created_at)
);

CREATE INDEX IF NOT EXISTS idx_mcfa_model_id_is_enabled ON model_custom_field_assignment(model_id, is_enabled);
CREATE INDEX IF NOT EXISTS idx_mcfa_definition_id ON model_custom_field_assignment(custom_field_definition_id);

-- Table: request_log
-- Stores detailed records of each API request processed by the system, including interaction with LLMs.
CREATE TABLE IF NOT EXISTS request_log (
    id BIGINT PRIMARY KEY,                          -- Unique identifier for the request log entry (Snowflake ID).
    system_api_key_id BIGINT,                       -- ID of the system_api_key used for this request.
    provider_id BIGINT,                             -- ID of the LLM provider called.
    model_id BIGINT,                                -- ID of the model called.
    provider_api_key_id BIGINT,                     -- ID of the specific provider_api_key used for the downstream LLM call.
    model_name TEXT,                                -- Model name specified in the user's request.
    real_model_name TEXT,                           -- Actual model name used for the LLM call.
    request_received_at BIGINT NOT NULL,            -- Timestamp when the system received the external request.
    llm_request_sent_at BIGINT,                     -- Timestamp when the system sent the request to the LLM.
    llm_response_first_chunk_at BIGINT,             -- Timestamp when the first chunk of a streamed LLM response was received.
    llm_response_completed_at BIGINT,               -- Timestamp when the full LLM response was received or LLM call errored.
    response_sent_to_client_at BIGINT,              -- Timestamp when the final response was sent to the external client.
    client_ip TEXT,                                 -- IP address of the client making the request.
    external_request_uri TEXT,                      -- Full URI of the external request.
    llm_request_uri TEXT,                           -- URI of the request to the LLM provider.
    llm_response_status INTEGER,                    -- HTTP status code from the LLM provider.
    llm_request_body TEXT,                          -- Body of the request sent to the LLM (e.g., on error or for debugging).
    llm_response_body TEXT,                         -- Body of the response from the LLM (e.g., on error or for debugging).
    status TEXT DEFAULT 'PENDING',                  -- Status of the proxied request: 'PENDING', 'SUCCESS', 'ERROR'.
    is_stream BOOLEAN NOT NULL DEFAULT false,       -- Flag indicating if the request was for a streaming response.
    calculated_cost BIGINT DEFAULT 0,               -- Calculated cost of the LLM call in micro-units of the currency.
    cost_currency TEXT,                             -- Currency code (e.g., "USD") for the calculated_cost.
    created_at BIGINT NOT NULL,                     -- Timestamp when this log record was created.
    updated_at BIGINT NOT NULL,                     -- Timestamp when this log record was last updated.
    prompt_tokens INTEGER DEFAULT 0,                -- Number of prompt tokens.
    completion_tokens INTEGER DEFAULT 0,            -- Number of completion tokens.
    reasoning_tokens INTEGER DEFAULT 0,             -- Number of reasoning/tool_call/function_call tokens if applicable.
    total_tokens INTEGER DEFAULT 0,                 -- Sum of prompt and completion tokens (may or may not include reasoning).

    -- Foreign Key Constraints
    CONSTRAINT fk_request_log_system_api_key_id
        FOREIGN KEY (system_api_key_id) REFERENCES system_api_key(id)
        ON DELETE SET NULL ON UPDATE CASCADE,
    CONSTRAINT fk_request_log_provider_id
        FOREIGN KEY (provider_id) REFERENCES provider(id)
        ON DELETE RESTRICT ON UPDATE CASCADE,
    CONSTRAINT fk_request_log_model_id
        FOREIGN KEY (model_id) REFERENCES model(id)
        ON DELETE SET NULL ON UPDATE CASCADE,
    CONSTRAINT fk_request_log_provider_api_key_id
        FOREIGN KEY (provider_api_key_id) REFERENCES provider_api_key(id)
        ON DELETE SET NULL ON UPDATE CASCADE,

    -- Data Integrity Constraints
    CONSTRAINT chk_request_log_tokens_non_negative CHECK (
        prompt_tokens >= 0 AND
        completion_tokens >= 0 AND
        reasoning_tokens >= 0 AND
        total_tokens >= 0
    ),
    CONSTRAINT chk_request_log_timestamps_order CHECK (updated_at >= created_at),
    CONSTRAINT chk_request_log_status CHECK (status IN ('PENDING', 'SUCCESS', 'ERROR'))
);

-- Indexes for common query patterns on request_log
CREATE INDEX IF NOT EXISTS idx_request_log_system_api_key_id ON request_log (system_api_key_id);
CREATE INDEX IF NOT EXISTS idx_request_log_provider_id ON request_log (provider_id);
CREATE INDEX IF NOT EXISTS idx_request_log_model_id ON request_log (model_id);
CREATE INDEX IF NOT EXISTS idx_request_log_model_name ON request_log (model_name);
CREATE INDEX IF NOT EXISTS idx_request_log_real_model_name ON request_log (real_model_name);
CREATE INDEX IF NOT EXISTS idx_request_log_request_received_at ON request_log (request_received_at);
CREATE INDEX IF NOT EXISTS idx_request_log_status ON request_log (status);
CREATE INDEX IF NOT EXISTS idx_request_log_client_ip ON request_log (client_ip);
CREATE INDEX IF NOT EXISTS idx_request_log_created_at ON request_log (created_at);

-- Table: model_alias
-- Stores user-defined aliases that map to specific models in the 'model' table.
CREATE TABLE IF NOT EXISTS model_alias (
    id BIGINT PRIMARY KEY,                          -- Unique identifier for the model alias (Snowflake ID).
    alias_name TEXT NOT NULL,                       -- The user-facing alias string.
    target_model_id BIGINT NOT NULL,                -- Foreign key: The ID of the 'model' record this alias points to.
    description TEXT,                               -- Optional description for this alias.
    priority INTEGER DEFAULT 0,                     -- Optional: Priority for resolving aliases.
    is_enabled BOOLEAN NOT NULL DEFAULT true,       -- Flag indicating if this alias mapping is currently active.
    deleted_at BIGINT DEFAULT NULL,                 -- Soft delete timestamp. NULL indicates the alias is active.
    created_at BIGINT NOT NULL,                     -- Timestamp (milliseconds since epoch) of creation.
    updated_at BIGINT NOT NULL,                     -- Timestamp (milliseconds since epoch) of last update.

    -- Foreign Key Constraint: Links to 'model' table.
    CONSTRAINT fk_model_alias_target_model_id
        FOREIGN KEY (target_model_id) REFERENCES model(id)
        ON DELETE RESTRICT      -- If the target model is deleted, an error should occur.
        ON UPDATE CASCADE,
    -- Data Integrity Constraints
    CONSTRAINT chk_model_alias_name_not_empty CHECK (alias_name <> ''),
    CONSTRAINT chk_model_alias_timestamps CHECK (updated_at >= created_at)
);

-- Unique Index: Ensures active and enabled alias_name strings are unique.
CREATE UNIQUE INDEX IF NOT EXISTS idx_model_alias_name_uq_active
ON model_alias (alias_name)
WHERE deleted_at IS NULL AND is_enabled = true;

-- Indexes: For common query patterns.
CREATE INDEX IF NOT EXISTS idx_model_alias_target_model_id ON model_alias (target_model_id);
CREATE INDEX IF NOT EXISTS idx_model_alias_is_enabled ON model_alias (is_enabled);
CREATE INDEX IF NOT EXISTS idx_model_alias_deleted_at ON model_alias (deleted_at);

