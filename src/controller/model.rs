use axum::{
    extract::{Path, State},
    http::StatusCode,
    response::Json,
    routing::{delete, get, post, put},
    Router,
};
use serde::{Deserialize, Serialize};

use crate::{
    config::Config,
    controller::BaseError,
    database::model::Model,
    db_execute,
};

#[derive(Debug, Deserialize)]
pub struct InsertModelRequest {
    pub provider_id: i64,
    pub model_name: String,
    pub real_model_name: Option<String>,
    pub is_deleted: bool,
    pub is_enabled: bool,
}

async fn insert_model(
    Json(request): Json<InsertModelRequest>,
) -> Result<Json<Model>, BaseError> {
    let model = Model {
        id: 0, // Auto-generated by the database
        provider_id: request.provider_id,
        model_name: request.model_name.clone(),
        real_model_name: request.real_model_name.clone(),
        is_deleted: request.is_deleted,
        is_enabled: request.is_enabled,
        created_at: 0, // Auto-generated by the database
        updated_at: 0, // Auto-generated by the database
    };

    Model::insert(&model)?;
    Ok(Json(model))
}
async fn delete_model(Path(id): Path<i64>) -> Result<StatusCode, BaseError> {
    Model::delete(id)?;
    Ok(StatusCode::NO_CONTENT)
}
#[derive(Debug, Deserialize)]
pub struct UpdateModelRequest {
    pub provider_id: Option<i64>,
    pub model_name: Option<String>,
    pub real_model_name: Option<String>,
    pub is_deleted: Option<bool>,
    pub is_enabled: Option<bool>,
}

async fn update_model(
    Path(id): Path<i64>,
    Json(request): Json<UpdateModelRequest>,
) -> Result<Json<Model>, BaseError> {
    let mut model = Model::get(id)?;

    if let Some(provider_id) = request.provider_id {
        model.provider_id = provider_id;
    }
    if let Some(model_name) = request.model_name {
        model.model_name = model_name;
    }
    if let Some(real_model_name) = request.real_model_name {
        model.real_model_name = Some(real_model_name);
    }
    if let Some(is_deleted) = request.is_deleted {
        model.is_deleted = is_deleted;
    }
    if let Some(is_enabled) = request.is_enabled {
        model.is_enabled = is_enabled;
    }

    Model::update(&model)?;
    Ok(Json(model))
}
async fn list_models() -> Result<Json<Vec<Model>>, BaseError> {
    let models = Model::list()?;
    Ok(Json(models))
}

pub fn create_model_router() -> Router {
    Router::new().nest(
        "/model",
        Router::new()
            .route("/", post(insert_model))
            .route("/list", get(list_models))
            .route("/{id}", delete(delete_model))
            .route("/{id}", put(update_model))
    )
}
