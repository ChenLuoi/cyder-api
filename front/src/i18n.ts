import { createSignal, Accessor, Setter, createResource, createMemo } from 'solid-js';
import { flatten, translator, resolveTemplate } from '@solid-primitives/i18n';

// Define your dictionaries here
const enDict = {
    providerPage: {
        editModel: "Edit model: {{model_name}}",
    },
    providerPageTitle: "Providers Management",
    addProvider: "Add New Provider",
    providersLoading: "Loading providers...",
    providersError: "Error loading providers: {{error}}",
    noProviders: "No providers found. Click 'Add New Provider' to get started.",
    tableHeaderKey: "Key",
    name: "Name",
    tableHeaderType: "Type",
    tableHeaderUseProxy: "Use Proxy",
    tableHeaderLimitModel: "Limit Model",
    providerModels: "Models",
    providerApiKeys: "API Keys",
    actions: "Actions",
    dashboard: {
        systemOverview: {
            title: "System Overview",
            providers: "Total Providers",
            models: "Total Models",
            providerKeys: "Total Provider API Keys",
        },
        todayLogStats: {
            title: "Today's Request Log Stats",
            requests: "Requests Today",
            promptTokens: "Prompt Tokens Today",
            completionTokens: "Completion Tokens Today",
            reasoningTokens: "Reasoning Tokens Today",
            totalTokens: "Total Tokens Today",
            totalCost: "Total Cost Today",
        },
        usageStats: {
            title: "Usage Statistics",
            noData: "No data available for this period",
            total: "Total",
            summary: {
                title: "Summary by Model",
                model: "Model",
            },
            intervals: {
                hour: "Hourly",
                day: "Daily",
                month: "Monthly",
            },
            timeRanges: {
                last_1_hour: "Last 1 hour",
                last_3_hours: "Last 3 hours",
                last_6_hours: "Last 6 hours",
                last_24_hours: "Last 24 hours",
                today: "Today",
                yesterday: "Yesterday",
                this_week: "This week",
                last_7_days: "Last 7 days",
                previous_week: "Previous week",
                this_month: "This month",
                last_30_days: "Last 30 days",
                previous_month: "Previous month",
                last_6_months: "Last 6 months",
                this_year: "This year",
                last_1_year: "Last year",
            },
            metrics: {
                prompt_tokens: "Prompt Tokens",
                completion_tokens: "Completion Tokens",
                reasoning_tokens: "Reasoning Tokens",
                total_tokens: "Total Tokens",
                request_count: "Request Count",
                total_cost: "Total Cost",
            },
            chartTypes: {
                line: "Line",
                bar: "Bar",
            },
        },
        errorLoading: "Error loading stats: {{error}}",
    },
    edit: "Edit",
    delete: "Delete",
    confirmDeleteProvider: "Are you sure you want to delete the provider '{{name}}'?",
    deleteFailed: "Failed to delete provider: {{error}}",
    unknownError: "An unknown error occurred.",
    recordYes: "Yes",
    recordNo: "No",
    currencies: {
        USD: "USD",
        CNY: "CNY",
    },
    // Add other general translations if needed
    loading: "Loading...",
    sidebar: {
        dashboard: "Dashboard",
        record: "Record",
        provider: "Provider",
        apiKey: "API Key",
        modelTransform: "Model Transform",
        limitStrategy: "Limit Strategy",
        customFields: "Custom Fields",
        price: "Price",
    },
    appHeader: "AI Gateway Manager",
    appFooter: "Â© 2025 AI Gateway Manager. All rights reserved.",
    toggleSidebar: "Toggle Sidebar",
    language: {
        english: "English",
        chinese: "Chinese",
    },
    recordPage: {
        title: "Request Records",
        filter: {
            apiKeyPlaceholder: "Select API Key",
            allApiKeys: "All API Keys",
            apiKeyLabel: "API Key",
            providerPlaceholder: "Select Provider",
            allProviders: "All Providers",
            providerLabel: "Provider",
            modelNameLabel: "Model Name",
            modelNamePlaceholder: "Model Name",
            applyButton: "Apply Filter",
            resetButton: "Reset",
        },
        loading: "Loading records...",
        errorPrefix: "Error loading records:",
        unknownError: "Unknown error",
        table: {
            modelName: "Model Name",
            provider: "Provider",
            apiKey: "API Key",
            status: "Status",
            promptTokens: "Prompt Tokens",
            completionTokens: "Completion Tokens",
            reasoningTokens: "Reasoning Tokens",
            totalTokens: "Total Tokens",
            stream: "Stream",
            firstResp: "First Resp (s)",
            totalResp: "Total Resp (s)",
            tps: "TPS",
            cost: "Cost",
            requestTime: "Request Time",
            noRecordsMatch: "No records found matching your criteria.",
            noRecordsAvailable: "No records available.",
            viewDetails: "Details",
        },
        pagination: {
            previousPage: "Previous Page",
            nextPage: "Next Page",
            page: "Page",
            of: "of",
            items: "items",
            itemsPerPage: "Items per page:",
            selectItemsPerPage: "Select number of items per page",
        },
    },
    common: {
        yes: "Yes",
        no: "No",
        edit: "Edit",
        delete: "Delete",
        save: "Save Changes",
        cancel: "Cancel",
        notAvailable: "N/A",
        refresh: "Refresh",
    },
    apiKeyPage: {
        title: "API Key Management",
        addApiKey: "Add API Key",
        loading: "Loading API keys...",
        errorPrefix: "Error loading API keys:",
        noData: "No API Key data available.",
        table: {
            name: "Name",
            apiKeyPartial: "API Key (Partial)",
            description: "Description",
            enabled: "Enabled",
            createdAt: "Created At",
            updatedAt: "Updated At",
            actions: "Actions",
        },
        copy: "Copy full key",
        copied: "Copied!",
        confirmDelete: "Are you sure you want to delete API Key '{{name}}'?",
        copyFailed: "Failed to copy API key.",
        toggleStatusFailed: "Error toggling API key status: {{error}}",
    },
    apiKeyEditModal: {
        titleEdit: "Edit API Key",
        titleAdd: "Add API Key",
        labelName: "Name",
        labelApiKey: "API Key",
        apiKeyHelpText: "(Leave blank to keep unchanged)",
        apiKeyPlaceholderEdit: "Enter new key to change",
        apiKeyPlaceholderNew: "Enter API Key",
        buttonShow: "Show",
        buttonHide: "Hide",
        labelDescription: "Description",
        labelEnabled: "Enabled",
        alert: {
            formDataError: "Error: Form data is not available. Please try again.",
            nameRequired: "Name cannot be empty.",
            apiKeyRequired: "API Key cannot be empty.",
            saveFailed: "Save failed: {{error}}",
        }
    },
    modelAliasPage: {
        title: "Model Transform",
        addModelAlias: "Add Model Transform",
        loading: "Loading model transforms...",
        errorPrefix: "Error loading model transforms.",
        noData: "No model transforms found.",
        table: {
            aliasName: "Model Name",
            targetModelName: "Mapped Model Name",
            enabled: "Enabled",
        },
        modal: {
            titleEdit: "Edit Model Transform",
            titleAdd: "Add Model Transform",
            labelAliasName: "Model Alias",
            placeholderAliasName: "e.g. gpt-4-alias",
            labelTargetProvider: "Target Model's Provider",
            placeholderProvider: "Select Provider",
            labelTargetModel: "Target Model Name",
            placeholderModel: "Select Model",
            labelEnabled: "Enabled",
        },
        alert: {
            loadDetailFailed: "Failed to load model transform details or target_model_id missing.",
            nameAndTargetRequired: "Model Name and Mapped Model (selected from provider) cannot be empty.",
            saveFailed: "Error saving model transform: {{error}}",
            toggleFailed: "Error toggling model transform: {{error}}",
            deleteFailed: "Error deleting model transform: {{error}}",
        },
        confirmDelete: "Are you sure you want to delete model transform '{{name}}'?",
    },
    providerEditPage: {
        titleEdit: "Edit Provider",
        titleAdd: "Add New Provider",
        loadingData: "Loading provider data...",
        alert: {
            fetchDetailFailed: "Failed to fetch provider detail for ID {{providerId}}",
            loadDataFailed: "Failed to load provider data for ID: {{providerId}}.",
            nameRequired: "Name cannot be empty.",
            providerKeyRequired: "Provider Key cannot be empty.",
            endpointRequired: "Endpoint cannot be empty.",
            baseInfoUpdateSuccess: "Provider base information updated successfully.",
            createSuccess: "Provider created successfully. You can now add models and API Keys.",
            baseInfoSaveFailed: "Failed to save provider base information: {{error}}",
            providerNotSavedForApiKey: "Provider must be saved before API Keys can be added.",
            apiKeyRequiredWithIndex: "API Key #{{index}} cannot be empty.",
            vertexApiKeyMissingFields: "Vertex API Key #{{index}} (JSON) is missing or has empty fields: {{fields}}.",
            vertexApiKeyInvalidJson: "Vertex API Key #{{index}} must be a valid JSON format.",
            saveApiKeyFailed: "Failed to save API Key: {{error}}",
            providerNotSavedForModel: "Provider must be saved before models can be added or edited.",
            modelIdRequiredWithIndex: "Model ID for model #{{index}} cannot be empty.",
            saveModelFailed: "Failed to save model: {{error}}",
            providerNotSavedForModelDelete: "Provider not saved, cannot delete model from backend.",
            deleteModelFailed: "Failed to delete model: {{error}}",
            deleteApiKeyFailed: "Failed to delete API Key: {{error}}",
        },
        labelName: "Name",
        labelProviderKey: "Provider Key",
        labelProviderType: "Provider Type",
        labelEndpoint: "Endpoint",
        labelUseProxy: "Use Proxy",
        labelLimitModel: "Limit Model",
        placeholderProviderType: "Select Provider Type",
        buttonUpdateBaseInfo: "Update Provider Base Info",
        buttonCreateBaseInfo: "Create Provider & Save Base Info",
        sectionModels: "Models",
        tableHeaderModelId: "Model ID",
        tableHeaderMappedModelId: "Mapped Model ID",
        placeholderModelId: "e.g., gpt-3.5-turbo",
        placeholderMappedModelId: "e.g., azure-gpt-35 (optional)",
        buttonSaveModel: "Save Model",
        buttonAddModel: "Add Model",
        sectionApiKeys: "API Keys",
        tableHeaderApiKey: "API Key",
        tableHeaderDescription: "Description",
        tableHeaderActions: "Actions",
        placeholderApiKey: "Enter API Key",
        placeholderDescription: "Optional description",
        buttonSaveThisKey: "Save This Key",
        buttonAddApiKey: "Add API Key",
        sectionCustomFields: "Custom Fields",
        tableHeaderFieldName: "Field Name",
        tableHeaderFieldValue: "Field Value",
        tableHeaderFieldType: "Field Type",
        buttonAddCustomField: "Add Custom Field",
        buttonBackToList: "Back to List",
    },
    modelEditPage: {
        title: "Edit Model",
        loading: "Loading model data...",
        labelModelName: "Model Name",
        labelRealModelName: "Real Model Name",
        labelEnabled: "Enabled",
        sectionCustomFields: "Custom Fields",
        tableHeaderFieldName: "Field Name",
        tableHeaderFieldValue: "Field Value",
        tableHeaderDescription: "Description",
        tableHeaderFieldType: "Field Type",
        placeholderSelectCustomField: "Select a custom field to link",
        labelSelectCustomField: "Select Custom Field",
        buttonAddCustomField: "Link Custom Field",
        alert: {
            missingId: "Model ID is missing. Cannot edit.",
            loadDataFailed: "Failed to load model data for ID: {{modelId}}.",
            nameRequired: "Model Name cannot be empty.",
            updateSuccess: "Model updated successfully.",
            saveFailed: "Failed to save model: {{error}}",
            selectFieldToLink: "Please select a custom field to link.",
            modelNotLoaded: "Model data not loaded, cannot link field.",
            linkSuccess: "Custom field linked successfully.",
            linkFailed: "Failed to link custom field: {{error}}",
            modelIdNotFound: "Model ID not found, cannot unlink field.",
            unlinkSuccess: "Custom field unlinked successfully.",
            unlinkFailed: "Failed to unlink custom field: {{error}}",
            fetchCustomFieldsFailed: "Failed to fetch custom fields.",
        },
        priceSection: {
            title: "Price Management",
            labelBillingPlan: "Billing Plan",
            placeholderBillingPlan: "Select a billing plan",
            noPlan: "None (No billing)",
        }
    },
    customFieldsPage: {
        title: "Custom Fields",
        addCustomField: "Add Custom Field",
        errorPrefix: "Error loading custom fields:",
        noData: "No custom fields found.",
        table: {
            name: "Name",
            fieldName: "Field Name",
            fieldType: "Field Type",
            placement: "Placement",
            enabled: "Enabled",
        },
        alert: {
            loadDetailFailed: "Failed to load custom field detail.",
            nameAndTypeRequired: "Field Name and Field Type cannot be empty.",
            saveFailed: "Failed to save custom field: {{error}}",
            toggleFailed: "Failed to toggle custom field status: {{error}}",
            deleteFailed: "Failed to delete custom field: {{error}}",
        },
        confirmDelete: "Are you sure you want to delete custom field '{{name}}'?",
        modal: {
            titleEdit: "Edit Custom Field",
            titleAdd: "Add Custom Field",
            labelName: "Name",
            placeholderName: "Optional display name",
            labelDescription: "Description",
            placeholderDescription: "Optional description",
            labelFieldName: "Field Name",
            placeholderFieldName: "e.g., x-request-id",
            labelPlacement: "Placement",
            placeholderPlacement: "Select a placement",
            labelFieldType: "Field Type",
            placeholderFieldType: "Select a field type",
            labelValue: "Value",
            placeholderStringValue: "Enter string value",
            placeholderJsonStringValue: "Enter a valid JSON string",
            placeholderIntegerValue: "Enter integer value",
            placeholderNumberValue: "Enter number value",
            labelEnabled: "Enabled",
        }
    },
    pricePage: {
        title: "Price Management",
        confirmDeletePlan: "Are you sure you want to delete billing plan '{{name}}'?",
        confirmDeleteRule: "Are you sure you want to delete this price rule?",
        alert: {
            planNameRequired: "Plan name is required.",
            planSaveSuccess: "Billing plan saved successfully.",
            planSaveFailed: "Failed to save billing plan: {{error}}",
            planDeleteSuccess: "Billing plan deleted successfully.",
            planDeleteFailed: "Failed to delete billing plan: {{error}}",
            selectPlanFirst: "Please select a billing plan first.",
            ruleSaveSuccess: "Price rule saved successfully.",
            ruleSaveFailed: "Failed to save price rule: {{error}}",
            ruleDeleteSuccess: "Price rule deleted successfully.",
            ruleDeleteFailed: "Failed to delete price rule: {{error}}",
        },
        plans: {
            title: "Billing Plans",
            add: "Add Billing Plan",
            loading: "Loading billing plans...",
            table: {
                name: "Name",
                description: "Description",
                currency: "Currency",
                actions: "Actions",
            },
            modal: {
                titleEdit: "Edit Billing Plan",
                titleAdd: "New Billing Plan",
                name: "Name",
                description: "Description",
                currency: "Currency",
            },
        },
        rules: {
            title: "Price Rules",
            add: "Add Price Rule",
            loading: "Loading price rules...",
            table: {
                description: "Description",
                enabled: "Enabled",
                usageType: "Usage Type",
                mediaType: "Media Type",
                price: "Price",
                effectiveFrom: "Effective From",
                actions: "Actions",
            },
            modal: {
                titleEdit: "Edit Price Rule",
                titleAdd: "New Price Rule",
                description: "Description",
                enabled: "Enabled",
                usageType: "Usage Type",
                mediaType: "Media Type",
                mediaTypeDefault: "Default (Any)",
                price: "Price ($ / 1M tokens)",
                currency: "Currency",
                effectiveFrom: "Effective From",
                effectiveUntil: "Effective Until",
            },
        },
    },
};

// You can add more dictionaries for other languages
const zhDict = {
    providerPage: {
        editModel: "ç¼è¾æ¨¡å: {{model_name}}",
    },
    providerPageTitle: "æ¸ éç®¡ç",
    addProvider: "æ·»å æ°æ¸ é",
    providersLoading: "æ­£å¨å è½½æ¸ é...",
    providersError: "å è½½æ¸ ééè¯¯: {{error}}",
    noProviders: "æªæ¾å°æ¸ éãç¹å»âæ·»å æ°æ¸ éâå¼å§ã",
    tableHeaderKey: "å¯é¥",
    name: "åç§°",
    tableHeaderType: "ç±»å",
    tableHeaderUseProxy: "ä½¿ç¨ä»£ç",
    tableHeaderLimitModel: "éå¶æ¨¡å",
    providerModels: "æ¨¡å",
    providerApiKeys: "APIå¯é¥",
    actions: "æä½",
    dashboard: {
        systemOverview: {
            title: "ç³»ç»æ»è§",
            providers: "æ¸ éæ»æ°",
            models: "æ¨¡åæ»æ°",
            providerKeys: "æ¸ éAPIå¯é¥æ»æ°",
        },
        todayLogStats: {
            title: "ä»æ¥è¯·æ±æ¥å¿ç»è®¡",
            requests: "ä»æ¥è¯·æ±æ°",
            promptTokens: "ä»æ¥Prompt Tokens",
            completionTokens: "ä»æ¥Completion Tokens",
            reasoningTokens: "ä»æ¥Reasoning Tokens",
            totalTokens: "ä»æ¥Total Tokens",
            totalCost: "ä»æ¥æ»è´¹ç¨",
        },
        usageStats: {
            title: "ä½¿ç¨æåµç»è®¡",
            noData: "æ­¤æé´æ å¯ç¨æ°æ®",
            total: "æ»è®¡",
            summary: {
                title: "ææ¨¡åæ±æ»",
                model: "æ¨¡å",
            },
            intervals: {
                hour: "æ¯å°æ¶",
                day: "æ¯å¤©",
                month: "æ¯æ",
            },
            timeRanges: {
                last_1_hour: "è¿å»1å°æ¶",
                last_3_hours: "è¿å»3å°æ¶",
                last_6_hours: "è¿å»6å°æ¶",
                last_24_hours: "è¿å»24å°æ¶",
                today: "ä»å¤©",
                yesterday: "æ¨å¤©",
                this_week: "æ¬å¨",
                last_7_days: "è¿å»7å¤©",
                previous_week: "ä¸å¨",
                this_month: "æ¬æ",
                last_30_days: "è¿å»30å¤©",
                previous_month: "ä¸ä¸ªæ",
                last_6_months: "è¿å»6ä¸ªæ",
                this_year: "ä»å¹´",
                last_1_year: "è¿å»ä¸å¹´",
            },
            metrics: {
                prompt_tokens: "è¾å¥ Tokens",
                completion_tokens: "è¾åº Tokens",
                reasoning_tokens: "æ¨ç Tokens",
                total_tokens: "æ» Tokens",
                request_count: "è¯·æ±æ°",
                total_cost: "æ»è´¹ç¨",
            },
            chartTypes: {
                line: "æçº¿å¾",
                bar: "æ±ç¶å¾",
            },
        },
        errorLoading: "å è½½ç»è®¡æ°æ®éè¯¯: {{error}}",
    },
    edit: "ç¼è¾",
    delete: "å é¤",
    confirmDeleteProvider: "æ¨ç¡®å®è¦å é¤æ¸ éâ{{name}}âåï¼",
    deleteFailed: "å é¤æ¸ éå¤±è´¥: {{error}}",
    unknownError: "åçæªç¥éè¯¯ã",
    recordYes: "æ¯",
    recordNo: "å¦",
    currencies: {
        USD: "ç¾å",
        CNY: "äººæ°å¸",
    },
    loading: "å è½½ä¸­...",
    sidebar: {
        dashboard: "ä»ªè¡¨ç",
        record: "è®°å½",
        provider: "æ¸ é",
        apiKey: "APIå¯é¥",
        modelTransform: "æ¨¡åè½¬æ¢",
        limitStrategy: "éå¶ç­ç¥",
        customFields: "èªå®ä¹å­æ®µ",
        price: "ä»·æ ¼",
    },
    appHeader: "AIç½å³ç®¡çå¨",
    appFooter: "Â© 2025 AIç½å³ç®¡çå¨. çæææ.",
    toggleSidebar: "åæ¢ä¾§è¾¹æ ",
    language: {
        english: "è±æ",
        chinese: "ä¸­æ",
    },
    recordPage: {
        title: "è¯·æ±è®°å½",
        filter: {
            apiKeyPlaceholder: "éæ©API Key",
            allApiKeys: "ææAPI Keys",
            apiKeyLabel: "API Key",
            providerPlaceholder: "éæ©æ¸ é",
            allProviders: "æææ¸ é",
            providerLabel: "æ¸ é",
            modelNameLabel: "æ¨¡ååç§°",
            modelNamePlaceholder: "æ¨¡ååç§°",
            applyButton: "åºç¨ç­é",
            resetButton: "éç½®",
        },
        loading: "æ­£å¨å è½½è®°å½...",
        errorPrefix: "å è½½è®°å½éè¯¯ï¼",
        unknownError: "æªç¥éè¯¯",
        table: {
            modelName: "æ¨¡ååç§°",
            provider: "æ¸ é",
            apiKey: "API Key",
            status: "ç¶æ",
            promptTokens: "prompt tokenæ°",
            completionTokens: "completion tokenæ°",
            reasoningTokens: "reasoning tokenæ°",
            totalTokens: "æ»è®¡",
            stream: "Stream",
            firstResp: "é¦æ¬¡ååº (ç§)",
            totalResp: "æ»ååº (ç§)",
            tps: "TPS",
            cost: "è´¹ç¨",
            requestTime: "è¯·æ±æ¶é´",
            noRecordsMatch: "æªæ¾å°ç¬¦åæ¡ä»¶çè®°å½ã",
            noRecordsAvailable: "æ å¯ç¨è®°å½ã",
            viewDetails: "è¯¦æ",
        },
        pagination: {
            previousPage: "ä¸ä¸é¡µ",
            nextPage: "ä¸ä¸é¡µ",
            page: "ç¬¬",
            of: "é¡µ, å±",
            items: "æ¡",
            itemsPerPage: "æ¯é¡µæ¾ç¤ºæ¡æ°ï¼",
            selectItemsPerPage: "éæ©æ¯é¡µæ¾ç¤ºæ¡æ°",
        },
    },
    common: {
        yes: "æ¯",
        no: "å¦",
        edit: "ç¼è¾",
        delete: "å é¤",
        save: "ä¿å­æ´æ¹",
        cancel: "åæ¶",
        notAvailable: "æ ",
        refresh: "å·æ°",
    },
    apiKeyPage: {
        title: "API Key ç®¡ç",
        addApiKey: "æ·»å  API Key",
        loading: "æ­£å¨å è½½ API Key...",
        errorPrefix: "å è½½ API Key éè¯¯:",
        noData: "ææ  API Key æ°æ®.",
        table: {
            name: "åç§°",
            apiKeyPartial: "API Key (é¨å)",
            description: "æè¿°",
            enabled: "å¯ç¨",
            createdAt: "åå»ºæ¶é´",
            updatedAt: "æ´æ°æ¶é´",
            actions: "æä½",
        },
        copy: "å¤å¶å®æ´å¯é¥",
        copied: "å·²å¤å¶!",
        confirmDelete: "æ¨ç¡®å®è¦å é¤ API Key â{{name}}â åï¼",
        copyFailed: "å¤å¶ API Key å¤±è´¥ã",
        toggleStatusFailed: "åæ¢ API Key ç¶æå¤±è´¥: {{error}}",
    },
    apiKeyEditModal: {
        titleEdit: "ç¼è¾ API Key",
        titleAdd: "æ°å¢ API Key",
        labelName: "åç§°",
        labelApiKey: "API Key",
        apiKeyHelpText: "(çç©ºåä¸ä¿®æ¹)",
        apiKeyPlaceholderEdit: "è¾å¥æ°å¯é¥ä»¥æ´æ¹",
        apiKeyPlaceholderNew: "è¾å¥ API Key",
        buttonShow: "æ¾ç¤º",
        buttonHide: "éè",
        labelDescription: "æè¿°",
        labelEnabled: "å¯ç¨",
        alert: {
            formDataError: "éè¯¯ï¼è¡¨åæ°æ®ä¸å¯ç¨ãè¯·éè¯ã",
            nameRequired: "åç§° ä¸è½ä¸ºç©ºã",
            apiKeyRequired: "API Key ä¸è½ä¸ºç©ºã",
            saveFailed: "ä¿å­å¤±è´¥: {{error}}",
        }
    },
    modelAliasPage: {
        title: "æ¨¡åè½¬æ¢",
        addModelAlias: "æ·»å æ¨¡åè½¬æ¢",
        loading: "æ­£å¨å è½½æ¨¡åè½¬æ¢...",
        errorPrefix: "å è½½æ¨¡åè½¬æ¢éè¯¯ã",
        noData: "æªæ¾å°æ¨¡åè½¬æ¢ã",
        table: {
            aliasName: "æ¨¡ååç§°",
            targetModelName: "æ å°æ¨¡ååç§°",
            enabled: "æ¯å¦å¯ç¨",
        },
        modal: {
            titleEdit: "ç¼è¾æ¨¡åè½¬æ¢",
            titleAdd: "æ·»å æ¨¡åè½¬æ¢",
            labelAliasName: "æ¨¡åå«å",
            placeholderAliasName: "ä¾å¦ gpt-4-alias",
            labelTargetProvider: "ç®æ æ¨¡åæå±æ¸ é",
            placeholderProvider: "éæ©æ¸ é",
            labelTargetModel: "ç®æ æ¨¡ååç§°",
            placeholderModel: "éæ©æ¨¡å",
            labelEnabled: "æ¯å¦å¯ç¨",
        },
        alert: {
            loadDetailFailed: "å è½½æ¨¡åè½¬æ¢è¯¦æå¤±è´¥æç®æ æ¨¡åIDä¸¢å¤±ã",
            nameAndTargetRequired: "æ¨¡ååç§°åæ å°æ¨¡å (ä»æ¸ ééæ©) ä¸è½ä¸ºç©ºã",
            saveFailed: "ä¿å­æ¨¡åè½¬æ¢éè¯¯: {{error}}",
            toggleFailed: "åæ¢æ¨¡åè½¬æ¢ç¶æéè¯¯: {{error}}",
            deleteFailed: "å é¤æ¨¡åè½¬æ¢éè¯¯: {{error}}",
        },
        confirmDelete: "æ¨ç¡®å®è¦å é¤æ¨¡åè½¬æ¢ â{{name}}â åï¼",
    },
    providerEditPage: {
        titleEdit: "ç¼è¾æ¸ é",
        titleAdd: "æ°å¢æ¸ é",
        loadingData: "æ­£å¨å è½½æ¸ éæ°æ®...",
        alert: {
            fetchDetailFailed: "è·åæ¸ éè¯¦æå¤±è´¥ï¼ID {{providerId}}",
            loadDataFailed: "å è½½æ¸ éæ°æ®å¤±è´¥ï¼ID: {{providerId}}ã",
            nameRequired: "åç§° ä¸è½ä¸ºç©ºã",
            providerKeyRequired: "æ¸ éæ è¯ ä¸è½ä¸ºç©ºã",
            endpointRequired: "å°å ä¸è½ä¸ºç©ºã",
            baseInfoUpdateSuccess: "æ¸ éåºæ¬ä¿¡æ¯æ´æ°æåã",
            createSuccess: "æ¸ éåå»ºæåãç°å¨æ¨å¯ä»¥æ·»å æ¨¡åå API Keysã",
            baseInfoSaveFailed: "ä¿å­æ¸ éåºæ¬ä¿¡æ¯å¤±è´¥: {{error}}",
            providerNotSavedForApiKey: "å¿é¡»åä¿å­æ¸ éï¼ç¶åæè½æ·»å  API Keyã",
            apiKeyRequiredWithIndex: "API Key #{{index}} ä¸è½ä¸ºç©ºã",
            vertexApiKeyMissingFields: "Vertex API Key #{{index}} (JSON) ç¼ºå°æä¸ºç©ºçå­æ®µ: {{fields}}ã",
            vertexApiKeyInvalidJson: "Vertex API Key #{{index}} å¿é¡»æ¯ææç JSON æ ¼å¼ã",
            saveApiKeyFailed: "ä¿å­ API Key å¤±è´¥: {{error}}",
            providerNotSavedForModel: "å¿é¡»åä¿å­æ¸ éï¼ç¶åæè½æ·»å æç¼è¾æ¨¡åã",
            modelIdRequiredWithIndex: "æ¨¡å #{{index}} çæ¨¡åIDä¸è½ä¸ºç©ºã",
            saveModelFailed: "ä¿å­æ¨¡åå¤±è´¥: {{error}}",
            providerNotSavedForModelDelete: "æ¸ éæªä¿å­ï¼æ æ³ä»åç«¯å é¤æ¨¡åã",
            deleteModelFailed: "å é¤æ¨¡åå¤±è´¥: {{error}}",
            deleteApiKeyFailed: "å é¤ API Key å¤±è´¥: {{error}}",
        },
        labelName: "åç§°",
        labelProviderKey: "æ¸ éæ è¯",
        labelProviderType: "æ¸ éç±»å",
        labelEndpoint: "å°å",
        labelUseProxy: "ä½¿ç¨ä»£ç",
        labelLimitModel: "éå¶æ¨¡å",
        placeholderProviderType: "éæ©æ¸ éç±»å",
        buttonUpdateBaseInfo: "æ´æ°æ¸ éåºæ¬ä¿¡æ¯",
        buttonCreateBaseInfo: "åå»ºæ¸ éå¹¶ä¿å­åºæ¬ä¿¡æ¯",
        sectionModels: "æ¨¡å",
        tableHeaderModelId: "æ¨¡åID",
        tableHeaderMappedModelId: "æ å°æ¨¡åID",
        placeholderModelId: "ä¾å¦ gpt-3.5-turbo",
        placeholderMappedModelId: "ä¾å¦ azure-gpt-35 (å¯é)",
        buttonSaveModel: "ä¿å­æ¨¡å",
        buttonAddModel: "æ·»å æ¨¡å",
        sectionApiKeys: "API Keys",
        tableHeaderApiKey: "API Key",
        tableHeaderDescription: "æè¿°",
        tableHeaderActions: "æä½",
        placeholderApiKey: "è¾å¥ API Key",
        placeholderDescription: "å¯éæè¿°",
        buttonSaveThisKey: "ä¿å­æ­¤Key",
        buttonAddApiKey: "æ·»å API Key",
        sectionCustomFields: "èªå®ä¹å­æ®µ",
        tableHeaderFieldName: "å­æ®µå",
        tableHeaderFieldValue: "å­æ®µå¼",
        tableHeaderFieldType: "å­æ®µç±»å",
        buttonAddCustomField: "æ·»å èªå®ä¹å­æ®µ",
        buttonBackToList: "è¿ååè¡¨",
    },
    modelEditPage: {
        title: "ç¼è¾æ¨¡å",
        loading: "æ­£å¨å è½½æ¨¡åæ°æ®...",
        labelModelName: "æ¨¡ååç§°",
        labelRealModelName: "çå®æ¨¡ååç§°",
        labelEnabled: "å·²å¯ç¨",
        sectionCustomFields: "èªå®ä¹å­æ®µ",
        tableHeaderFieldName: "å­æ®µå",
        tableHeaderFieldValue: "å­æ®µå¼",
        tableHeaderDescription: "æè¿°",
        tableHeaderFieldType: "å­æ®µç±»å",
        placeholderSelectCustomField: "éæ©è¦å³èçèªå®ä¹å­æ®µ",
        labelSelectCustomField: "éæ©èªå®ä¹å­æ®µ",
        buttonAddCustomField: "å³èèªå®ä¹å­æ®µ",
        alert: {
            missingId: "ç¼ºå°æ¨¡åIDï¼æ æ³ç¼è¾ã",
            loadDataFailed: "å è½½æ¨¡åæ°æ®å¤±è´¥ï¼ID: {{modelId}}ã",
            nameRequired: "æ¨¡ååç§°ä¸è½ä¸ºç©ºã",
            updateSuccess: "æ¨¡åæ´æ°æåã",
            saveFailed: "ä¿å­æ¨¡åå¤±è´¥: {{error}}",
            selectFieldToLink: "è¯·éæ©è¦å³èçèªå®ä¹å­æ®µã",
            modelNotLoaded: "æ¨¡åæ°æ®æªå è½½ï¼æ æ³å³èå­æ®µã",
            linkSuccess: "èªå®ä¹å­æ®µå³èæåã",
            linkFailed: "å³èèªå®ä¹å­æ®µå¤±è´¥: {{error}}",
            modelIdNotFound: "æªæ¾å°æ¨¡åIDï¼æ æ³åæ¶å³èå­æ®µã",
            unlinkSuccess: "èªå®ä¹å­æ®µåæ¶å³èæåã",
            unlinkFailed: "åæ¶å³èèªå®ä¹å­æ®µå¤±è´¥: {{error}}",
            fetchCustomFieldsFailed: "è·åèªå®ä¹å­æ®µå¤±è´¥ã",
        },
        priceSection: {
            title: "ä»·æ ¼ç®¡ç",
            labelBillingPlan: "è®¡è´¹è®¡å",
            placeholderBillingPlan: "éæ©ä¸ä¸ªè®¡è´¹è®¡å",
            noPlan: "æ  (ä¸è®¡è´¹)",
        }
    },
    customFieldsPage: {
        title: "èªå®ä¹å­æ®µ",
        addCustomField: "æ·»å èªå®ä¹å­æ®µ",
        errorPrefix: "å è½½èªå®ä¹å­æ®µéè¯¯:",
        noData: "æªæ¾å°èªå®ä¹å­æ®µã",
        table: {
            name: "åç§°",
            fieldName: "å­æ®µå",
            fieldType: "å­æ®µç±»å",
            placement: "ä½ç½®",
            enabled: "å¯ç¨",
        },
        alert: {
            loadDetailFailed: "å è½½èªå®ä¹å­æ®µè¯¦æå¤±è´¥ã",
            nameAndTypeRequired: "å­æ®µååå­æ®µç±»åä¸è½ä¸ºç©ºã",
            saveFailed: "ä¿å­èªå®ä¹å­æ®µå¤±è´¥: {{error}}",
            toggleFailed: "åæ¢èªå®ä¹å­æ®µç¶æå¤±è´¥: {{error}}",
            deleteFailed: "å é¤èªå®ä¹å­æ®µå¤±è´¥: {{error}}",
        },
        confirmDelete: "æ¨ç¡®å®è¦å é¤èªå®ä¹å­æ®µâ{{name}}âåï¼",
        modal: {
            titleEdit: "ç¼è¾èªå®ä¹å­æ®µ",
            titleAdd: "æ·»å èªå®ä¹å­æ®µ",
            labelName: "åç§°",
            placeholderName: "å¯éçæ¾ç¤ºåç§°",
            labelDescription: "æè¿°",
            placeholderDescription: "å¯éçæè¿°",
            labelFieldName: "å­æ®µå",
            placeholderFieldName: "ä¾å¦, x-request-id",
            labelPlacement: "ä½ç½®",
            placeholderPlacement: "éæ©ä¸ä¸ªä½ç½®",
            labelFieldType: "å­æ®µç±»å",
            placeholderFieldType: "éæ©ä¸ä¸ªå­æ®µç±»å",
            labelValue: "å¼",
            placeholderStringValue: "è¾å¥å­ç¬¦ä¸²å¼",
            placeholderJsonStringValue: "è¾å¥ææçJSONå­ç¬¦ä¸²",
            placeholderIntegerValue: "è¾å¥æ´æ°å¼",
            placeholderNumberValue: "è¾å¥æ°å¼",
            labelEnabled: "å¯ç¨",
        }
    },
    pricePage: {
        title: "ä»·æ ¼ç®¡ç",
        confirmDeletePlan: "æ¨ç¡®å®è¦å é¤è®¡è´¹è®¡åâ{{name}}âåï¼",
        confirmDeleteRule: "æ¨ç¡®å®è¦å é¤æ­¤ä»·æ ¼è§ååï¼",
        alert: {
            planNameRequired: "è®¡ååç§°æ¯å¿å¡«é¡¹ã",
            planSaveSuccess: "è®¡è´¹è®¡åä¿å­æåã",
            planSaveFailed: "ä¿å­è®¡è´¹è®¡åå¤±è´¥: {{error}}",
            planDeleteSuccess: "è®¡è´¹è®¡åå é¤æåã",
            planDeleteFailed: "å é¤è®¡è´¹è®¡åå¤±è´¥: {{error}}",
            selectPlanFirst: "è¯·åéæ©ä¸ä¸ªè®¡è´¹è®¡åã",
            ruleSaveSuccess: "ä»·æ ¼è§åä¿å­æåã",
            ruleSaveFailed: "ä¿å­ä»·æ ¼è§åå¤±è´¥: {{error}}",
            ruleDeleteSuccess: "ä»·æ ¼è§åå é¤æåã",
            ruleDeleteFailed: "å é¤ä»·æ ¼è§åå¤±è´¥: {{error}}",
        },
        plans: {
            title: "è®¡è´¹è®¡å",
            add: "æ·»å è®¡è´¹è®¡å",
            loading: "æ­£å¨å è½½è®¡è´¹è®¡å...",
            table: {
                name: "åç§°",
                description: "æè¿°",
                currency: "è´§å¸",
                actions: "æä½",
            },
            modal: {
                titleEdit: "ç¼è¾è®¡è´¹è®¡å",
                titleAdd: "æ°å»ºè®¡è´¹è®¡å",
                name: "åç§°",
                description: "æè¿°",
                currency: "è´§å¸",
            },
        },
        rules: {
            title: "ä»·æ ¼è§å",
            add: "æ·»å ä»·æ ¼è§å",
            loading: "æ­£å¨å è½½ä»·æ ¼è§å...",
            table: {
                description: "æè¿°",
                enabled: "å·²å¯ç¨",
                usageType: "ä½¿ç¨ç±»å",
                mediaType: "åªä½ç±»å",
                price: "ä»·æ ¼",
                effectiveFrom: "çææ¶é´",
                actions: "æä½",
            },
            modal: {
                titleEdit: "ç¼è¾ä»·æ ¼è§å",
                titleAdd: "æ°å»ºä»·æ ¼è§å",
                description: "æè¿°",
                enabled: "å·²å¯ç¨",
                usageType: "ä½¿ç¨ç±»å",
                mediaType: "åªä½ç±»å",
                mediaTypeDefault: "é»è®¤ (ä»»ä½)",
                price: "ä»·æ ¼ ($ / ç¾ä¸ tokens)",
                currency: "è´§å¸",
                effectiveFrom: "çææ¶é´",
                effectiveUntil: "å¤±ææ¶é´",
            },
        },
    },
};

const dictionaries = {
    en: enDict,
    zh: zhDict,
};

// Default language
const defaultLang = "en";

// Type for the translation function arguments, matching resolveTemplate
type TranslationArgs = Record<string, string | number>;

// Type for the translation function itself
type TranslatorFn = (key: string, params?: TranslationArgs, defaultValue?: string) => string;

// Type for the value returned by useI18n
export type I18nInterface = [
    TranslatorFn,
    {
        locale: Accessor<string>;
        setLocale: Setter<string>;
    }
];

// LocalStorage key for language
const LANG_STORAGE_KEY = 'lang';

// Define a type for the keys of the dictionaries object
type LangKey = keyof typeof dictionaries;

// Function to get initial locale
const getInitialLocale = (): LangKey => {
    const storedLang = localStorage.getItem(LANG_STORAGE_KEY);
    if (storedLang && storedLang in dictionaries) {
        return storedLang as LangKey;
    }
    // You might want to add browser language detection here as a fallback
    return defaultLang as LangKey;
};

// Create a signal for the current locale
const [locale, _setLocaleSignal] = createSignal<LangKey>(getInitialLocale());

// Wrapper for setLocale to also save to localStorage
const setLocaleSignal: Setter<string> = (langOrFn: string | ((prev: string) => string)) => {
    const newLang = typeof langOrFn === 'function' ? langOrFn(locale()) : langOrFn;
    if (newLang in dictionaries) {
        _setLocaleSignal(newLang as LangKey);
        localStorage.setItem(LANG_STORAGE_KEY, newLang);
    } else {
        console.warn(`Language "${newLang}" not supported. Falling back to default or current.`);
        // Optionally, fall back to default or do nothing
        // localStorage.setItem(LANG_STORAGE_KEY, defaultLang);
        // _setLocaleSignal(defaultLang as LangKey);
    }
};

const dict = createMemo(() => flatten(dictionaries[locale() as LangKey]));

const tFunction = translator(dict, resolveTemplate) as TranslatorFn; // Cast to the simplified TranslatorFn

// The value that useI18n will provide
const i18nInstanceValue: I18nInterface = [
    tFunction, // Now tFunction's asserted type matches TranslatorFn in I18nInterface
    {
        locale: locale, // Accessor for the current locale
        setLocale: setLocaleSignal // Setter to change the locale
    }
];

// Create the useI18n hook
export const useI18n = (): I18nInterface => {
  return i18nInstanceValue;
};

// Optionally, you can export the t function and locale actions directly from the instance
export const t = tFunction;
export const actions = {
    locale: locale,
    setLocale: setLocaleSignal,
};
export const setLocale = setLocaleSignal;
export const currentLocale = locale;
